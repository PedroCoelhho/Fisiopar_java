package view.telas;

import control.PacienteC;
import java.text.ParseException;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import util.Yagami;

/**
 * Tela para vizualização básica de pacientes
 * @author Juan Galvão
 */
public class ViewPaciente extends javax.swing.JInternalFrame {
    // Variável para o contador
    protected Timer timer = new Timer();
    /**
     * Cria a InternalForm ViewPaciente
     * @param icon
     */
    
    public ViewPaciente() {
        initComponents();
        setLocation(100, 100);
        // Listar Pacientes na Tabela
        PacienteC.CONTROL.listTable(tablePaciente, false);
        
        // Redimensionar colunas da tabela
        Yagami.resizeColumns2(tablePaciente, 640, 10, 30, 30, 30);
        
        // Mudar modo de seleção da tabela
        tablePaciente.setRowSelectionAllowed(true);
        tablePaciente.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        // Loop para atualizar a tabela de 5 em 5 segugndos
        timer.schedule( new TimerTask() {
            @Override
            public void run() {
                PacienteC.CONTROL.listTable(tablePaciente, false);
            }
         }, 0, 5000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        tablePaciente = new javax.swing.JTable();
        lblTitulo = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        btnDetalhes = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuOperacoes = new javax.swing.JMenu();
        menuSair = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setTitle("Pacientes");
        setToolTipText("Tela para vizualização de Pacientes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconPacientes.png"))); // NOI18N
        setName("PAC002"); // NOI18N
        setVisible(true);

        tablePaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Data Nascimento", "Gênero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePaciente.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablePaciente.setRowHeight(20);
        tablePaciente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablePacienteMouseReleased(evt);
            }
        });
        scrollPane.setViewportView(tablePaciente);

        lblTitulo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTitulo.setText("Listagem de Pacientes");

        btnCadastrar.setText("Cadastrar Paciente");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnDetalhes.setText("Ver em detalhes");
        btnDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalhesActionPerformed(evt);
            }
        });

        menuOperacoes.setText("Operações");

        menuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuSair.setText("Sair");
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        menuOperacoes.add(menuSair);

        menuBar.add(menuOperacoes);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                        .addComponent(btnDetalhes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCadastrar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitulo)
                    .addComponent(btnCadastrar)
                    .addComponent(btnDetalhes))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Método chamado ao clique do mouse ser solto em cima da tabela */
    private void tablePacienteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePacienteMouseReleased
        // Testa se o clique foi duplo e se o evento ainda não foi consumido
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            try {
                // Consome o evento
                evt.consume();
                
                // Pegar ID da linha selecionada.
                int selectedRow = tablePaciente.getSelectedRow();
                String id = tablePaciente.getValueAt(selectedRow, 0).toString();
                int teste = Integer.parseInt(id);

                // Passa a ID para a variável do Yagami
                Yagami.YG.setPublicId(teste);
                
                // Exibe a janela de detalhes do Paciente
                JInternalFrame detail = new DetailPaciente();
                Yagami.exibirTela(detail, getParent(), true);

            } catch (NumberFormatException | ParseException error) {
                // Mostra janela com erro capturado pela Exceção
                JOptionPane.showMessageDialog(null, error);
            }
        }
    }//GEN-LAST:event_tablePacienteMouseReleased

    private void btnDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalhesActionPerformed
        // Pega a linha selecionada
        int sr = tablePaciente.getSelectedRow();
        
        // Testa se a id da linha é maior ou igual a 0 para não haver erros
        if(tablePaciente.getSelectedRow() >= 0) {
            try {
                // Pega o valor em String do valor da ID da linha selecionada
                String t = String.valueOf(tablePaciente.getValueAt(sr, 0));
                
                // Converte o valor para int e passa para a váriavel em Yagami
                Yagami.YG.setPublicId(Integer.parseInt(t));
                
                // Mostra a janela de detalhes
                JInternalFrame detail = new DetailPaciente();
                Yagami.exibirTela(detail, getParent(), true);
                
            } catch (ParseException ex) {
                // Mostra janela com erro capturado pela Exceção
                JOptionPane.showMessageDialog(null, ex);
            }
        } else {
            // Define a variável em Yagami para 0
            Yagami.YG.setPublicId(0);
            
        }
        
        
    }//GEN-LAST:event_btnDetalhesActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // Exibe a tela de Cadastro de Paciente
        JInternalFrame cadPac = new CadPaciente();
        Yagami.exibirTela(cadPac, getParent(), true);
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed
        // Fecha a janela
        this.dispose();
    }//GEN-LAST:event_menuSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnDetalhes;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuOperacoes;
    private javax.swing.JMenuItem menuSair;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tablePaciente;
    // End of variables declaration//GEN-END:variables
}

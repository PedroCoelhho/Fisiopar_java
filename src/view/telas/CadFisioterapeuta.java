package view.telas;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import util.Yagami;
import view.popups.FindEndereco;
import control.FisioterapeutaC;
import control.PacienteC;
import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Fisioterapeuta;

/**
 * @author Adrian Dantas
 * @author zampiroli - code
 */
public class CadFisioterapeuta extends javax.swing.JInternalFrame {
    // Variável para o contador

    protected Timer timer = new Timer();

    // Array para armazenar o Text Fields
    protected JTextField[] textFields;

    // Instância do popup da janela de endereços
    protected FindEndereco fe = new FindEndereco(null, true);

    //
    boolean cpfReturn;

    /**
     * Creates new form CadFisioterapeuta
     */
    public CadFisioterapeuta() {
        initComponents();
        setLocation(100, 100);
        // Requisita focos no txtNome
        txtNome.requestFocus();

        // Chama método para preencher array dos Text Fields
        loadTextFields();

        // Loop que atualzia a cada 50 milisegundos
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                // Método para verificar preenchimento dos Text Fields
                verify();

                // Garantir que o texto do campo endereço esteja correto
                txtEndereco.setText(String.valueOf(fe.idEndereco));
            }
        }, 0, 50);
    }

    /**
     * Método para preencher array com os Text Fields
     */
    private void loadTextFields() {
        textFields = new JTextField[]{
            txtNome,
            txtCpf,
            txtRg,
            txtTel1,
            txtTel2,
            txtEmail,
            txtEndereco
        };
    }

    /**
     * Método para verificar preenchimento dos Text Fields
     */
    private void verify() {
        // N° de campos preenchidos
        int completes = 0;

        // Para cada Text Field que não esteja vazio, contar +1 complete
        for (JTextField tf : textFields) {
            if (!"".equals(tf.getText())) {
                completes++;
            }
        }

        // Se todos os campos estiverem preenchidos, liberar botão
        if (comboEspecialidade.getSelectedIndex() != 0) {
            if (completes == textFields.length) {
                btnCadastrar.setEnabled(true);
            } else {
                btnCadastrar.setEnabled(false);
            }
        } else {
            btnCadastrar.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblCpf = new javax.swing.JLabel();
        lblRg = new javax.swing.JLabel();
        txtRg = new javax.swing.JTextField();
        lblTel1 = new javax.swing.JLabel();
        txtTel1 = new javax.swing.JTextField();
        lblTel2 = new javax.swing.JLabel();
        txtTel2 = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblEndereco = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        lblEspecialidade = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        comboEspecialidade = new javax.swing.JComboBox<String>();
        txtCpf = new javax.swing.JFormattedTextField();

        setClosable(true);
        setTitle("Cadastro Fisioterapeuta");
        setToolTipText("Cadastra Fisioterapeuta");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconBase.png"))); // NOI18N
        setName("FIS001"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        lblTitulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitulo.setText("CADASTRO FISIOTERAPEUTA");

        lblNome.setText("Nome:");

        lblCpf.setText("cpf:");

        lblRg.setText("Rg:");

        txtRg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRgActionPerformed(evt);
            }
        });

        lblTel1.setText("Telef:");

        lblTel2.setText("Telef:");

        lblEmail.setText("E-mail:");

        lblEndereco.setText("Endereço");

        txtEndereco.setBackground(new java.awt.Color(204, 204, 255));
        txtEndereco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEnderecoFocusGained(evt);
            }
        });

        lblEspecialidade.setText("Especialidade:");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        comboEspecialidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "------------------------------", "Ortopedia", "Cardiovascular", "Pneumofuncional", "Pediatria", "Neurofuncional", "Ginecologica" }));
        comboEspecialidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEspecialidadeActionPerformed(evt);
            }
        });

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCpfFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(lblTitulo)
                .addContainerGap(310, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEndereco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCadastrar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(txtEndereco)
                            .addComponent(txtTel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCpf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTel2, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEspecialidade)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblRg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtRg))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEmail)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtEmail))))
                            .addComponent(comboEspecialidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCpf)
                    .addComponent(lblRg)
                    .addComponent(txtRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTel1)
                    .addComponent(lblTel2)
                    .addComponent(txtTel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndereco)
                    .addComponent(lblEspecialidade)
                    .addComponent(comboEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(btnCadastrar)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtRgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRgActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        //** Tenta realizar a insercao dos dados da database */        
        try {
            //** Instanciando a classe de fisioterapeuta;
            Fisioterapeuta fisio = new Fisioterapeuta();

            //** Setando os atributos do objeto fisio;
            fisio.setCpf(txtCpf.getText().replaceAll("[^a-zA-Z0-9]", ""));
            fisio.setEmail(txtEmail.getText());
            fisio.setEspecialidade((String) comboEspecialidade.getSelectedItem());
            fisio.setFk_endereco(Integer.parseInt(txtEndereco.getText()));
            fisio.setNome(txtNome.getText());
            fisio.setRg(txtRg.getText());
            fisio.setTel_prim(txtTel1.getText());
            fisio.setTel_sec(txtTel2.getText());
            // Caso consiga cadastrar, limpa todos os campos e volta o foco para
            // o primeiro Text Field
            if (cpfReturn == true) {
                JOptionPane.showMessageDialog(null, "Cpf Invalido !");
                //System.out.println("Cpf falso");
                //Exception ex;
            } else if (FisioterapeutaC.CONTROL.create(fisio)) {
                comboEspecialidade.setSelectedIndex(0);
                for (JTextField tf : textFields) {
                    if (!"".equals(tf.getText())) {
                        tf.setText("");
                    }
                }
                txtNome.requestFocus();
            }
        } catch (NumberFormatException ex) {
            // Mostra mensagem de erro caso caia na Exception
            Yagami.mensagemErro(ex);
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void txtEnderecoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEnderecoFocusGained
        // Requisita o foco no campo do Convenio
        comboEspecialidade.requestFocus();
        // Mostra popup de endereços
        fe.setVisible(true);
        // Pega a ID do endereço selecionado no popup
        txtEndereco.setText(String.valueOf(fe.idEndereco));
        // Requisita o foco no campo do Convenio novamente (Garantia)
        comboEspecialidade.requestFocus();
    }//GEN-LAST:event_txtEnderecoFocusGained
    //Metodo chamado ao tentar fechar o frame;
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // Dialogo de confirmação
        int reply = JOptionPane.showConfirmDialog(
                null,
                "Tem certeza que deseja sair do cadastro de fisioterapeuta?",
                "Cancelar Cadastro",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        // Se confirmar o dialogo, fecha
        if (reply == JOptionPane.YES_OPTION) {
            this.dispose();
        } else {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void comboEspecialidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEspecialidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboEspecialidadeActionPerformed

    private void txtCpfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfFocusLost
        // TODO add your handling code here:
        String Cpf = txtCpf.getText().replaceAll("[^a-zA-Z0-9]", "");
        //Verificando se o campo esta preenchido        
        if (Cpf.length() > 0) {
            // usando o metodo isCPF() 
            if (Yagami.isCPF(Cpf) == true) {
                txtCpf.setBackground(Color.WHITE);
                cpfReturn = false;
            } else {
                cpfReturn = true;
                txtCpf.setBackground(Color.red);
            }
            //Verificando se ja existe Cpf cadastrado            
            try {
                if (FisioterapeutaC.CONTROL.search(Cpf) == true) {
                    txtCpf.setText(null);
                }
            } catch (SQLException ex) {
                Logger.getLogger(CadPaciente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtCpfFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JComboBox<String> comboEspecialidade;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEndereco;
    private javax.swing.JLabel lblEspecialidade;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblRg;
    private javax.swing.JLabel lblTel1;
    private javax.swing.JLabel lblTel2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtRg;
    private javax.swing.JTextField txtTel1;
    private javax.swing.JTextField txtTel2;
    // End of variables declaration//GEN-END:variables

}
